
      SUBROUTINE DOT(INFO,METHOD,IPRINT,NDV,NCON,X,XL,XU,OBJ,MINMAX,
     1G,RPRM,IPRM,WK,NRWK,IWK,NRIWK)
C
C                 ***** (C) COPYRIGHT *****
C     ***** VANDERPLAATS RESEARCH & DEVELOPMENT, INC. *****
C         ***** ALL RIGHTS RESERVED, WORLDWIDE *****
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION X(*),XL(*),XU(*),G(*),RPRM(*),IPRM(*),WK(*),
     1IWK(*),IPOINT(40),DUMMY(1)
      ZRO=1.0E-6
      IPRM(19)=-1
      LIMIT=0
      IF(LIMIT.GT.0) THEN
         IWRITE=IPRM(5)
         IF(IWRITE.LE.0) IWRITE=6
         IF(NDV.GT.4.OR.NCON.GT.10) THEN
            WRITE(IWRITE,360)
            WRITE(IWRITE,371)
            WRITE(IWRITE,372)NDV,NCON
            IGOTO=0
            RETURN
         ENDIF
      ENDIF
      IF (INFO.GT.0) GO TO 70
      IWRITE=IPRM(5)
      IF(IWRITE.LE.0) IWRITE=6
      IF (IPRINT.GT.0) THEN
         WRITE (IWRITE,360)
         IF(LIMIT.EQ.0) WRITE (IWRITE,370)
         IF(LIMIT.GT.0) WRITE (IWRITE,371)
         IGRAD=IPRM(1)
         WRITE (IWRITE,380) METHOD,NDV,NCON,IPRINT,IGRAD
         IF (IGRAD.GT.0) WRITE(IWRITE,390)
         IF (IGRAD.EQ.0) WRITE(IWRITE,400)
         IF (IGRAD.LT.0) WRITE(IWRITE,402)
         IF(MINMAX.LE.0) THEN
            WRITE(IWRITE,405)
         ELSE
            WRITE(IWRITE,406)
         ENDIF
         IF(METHOD.LT.0) THEN
            WRITE(IWRITE,430)METHOD
            METHOD=1
         ENDIF
         IF(METHOD.GT.3.AND.NCON.GT.0) THEN
            WRITE(IWRITE,440)METHOD
            METHOD=3
         ENDIF
         IF(METHOD.GT.2.AND.NCON.EQ.0) THEN
            WRITE(IWRITE,450)METHOD
            METHOD=2
         ENDIF
      ENDIF
      OBJ=0.
      IFCALL=0
      IGCALL=0
      NGT=0
      NAC=0
      NGOTOZ=0
      NVC=0
      DX=0.
      NXFD=0
      OBJS=0.
      XSAV=0.
      DO 20 I=1,NRWK
         WK(I)=0.
20    CONTINUE
      DO 30 I=1,NRIWK
         IWK(I)=0
30    CONTINUE
      CALL DOT001 (NDV,NCON,RPRM,IPRM,METHOD,NRWK,NRIWK,NRB,NGMAX,
     *IPRINT,IWRITE,XL,XU)
      NCOLA=IPRM(6)
      IF(NCON.EQ.0) NCOLA=0
      CALL DOT002 (IPOINT,NDV,NCON,NCOLA,NGMAX,NRB,METHOD)
      IWK(NRIWK)=IPOINT(34)
      N=IPOINT(35)-1
      IWK(N+24)=NGMAX
      IWK(N+25)=NRB
      IF (IPOINT(30).GT.NRWK.OR.IPOINT(40).GT.NRIWK) THEN
         WRITE (IWRITE,340) NRWK,IPOINT(30),NRIWK,IPOINT(40)
         WRITE (IWRITE,350)
         INFO=0
         IPRM(18)=1
         RETURN
      ENDIF
      NSCALX=IPOINT(20)
      NN=NSCALX+NDV-1
      DO 25 I=NSCALX,NN
25    WK(I)=1.
      ICHK=0
      DO 31 I=1,NDV
         XX=XL(I)-XU(I)
         IF(XX.GT.ZRO) THEN
            WRITE(IWRITE,32)I,XL(I),XU(I),I
            ICHK=1
         ENDIF
31    CONTINUE
      IF(ICHK.EQ.1) THEN
         WRITE(IWRITE,33)
         INFO=0
         IPRM(18)=2
         RETURN
      ENDIF
      ZROM=-10.*ZRO
      DO 35 I=1,NDV
         XX=X(I)-XL(I)
         IF(XX.GT.ZROM.AND.XX.LT.0.) X(I)=XL(I)
         XX=X(I)-XL(I)+ZRO
         IF(XX.LT.0.) THEN
            WRITE(IWRITE,36)I,X(I),XL(I),I
            X(I)=XL(I)
         ENDIF
         XX=XU(I)-X(I)
         IF(XX.GT.ZROM.AND.XX.LT.0.) X(I)=XU(I)
         XX=XU(I)-X(I)+ZRO
         IF(XX.LT.0.) THEN
            WRITE(IWRITE,37)I,X(I),XU(I),I
            X(I)=XU(I)
         ENDIF
35    CONTINUE
      NSCAL=0
      IFCALL=1
      IGOTO=1
      INFO=1
      GO TO 320
70    CONTINUE
      N=IWK(NRIWK)
      DO 51 I=1,40
         IPOINT(I)=IWK(N)
         N=N+1
51    CONTINUE
      N=IPOINT(27)-1
      OBJS=WK(N+1)
      XSAV=WK(N+3)
      DX=WK(N+4)
      N=IPOINT(35)-1
      IFCALL=IWK(N+1)
      IGCALL=IWK(N+2)
      IGOTO=IWK(N+3)
      NAC=IWK(N+4)
      NGOTOZ=IWK(N+5)
      NGT=IWK(N+6)
      NSCAL=IWK(N+7)
      NVC=IWK(N+8)
      NXFD=IWK(N+9)
      NGMAX=IWK(N+24)
      NRB=IWK(N+25)
      FDCH=RPRM(9)
      FDCHM=RPRM(10)
      IWRITE=IPRM(5)
      IGRAD=IPRM(1)
      ISCAL=IPRM(2)
      IPRNT1=IPRM(11)
      NDF=IPOINT(1)
      NA=IPOINT(2)
      NGL=IPOINT(10)
      NSCALX=IPOINT(20)
      NSX=IPOINT(22)
      NIC=IPOINT(31)
      IF(MINMAX.GT.0) OBJ=-OBJ
      IF(IGOTO.EQ.1) THEN
         DABOBJ=.0001*ABS(OBJ)
         P1M10=1.0E-10
         DABOBJ=MAX(DABOBJ,P1M10)
         IF(RPRM(3).LT.1.0E-20) RPRM(3)=DABOBJ
         IF(RPRM(12).LT.1.0E-20) RPRM(12)=DABOBJ
         IF(RPRM(8).LT.1.0E-20) THEN
            DX2=0.
            DO 75 I=1,NDV
               DX2=MAX(DX2,ABS(X(I)))
75          CONTINUE
            RPRM(8)=.2*DX2
         ENDIF
         IF(RPRM(6).LT.1.0E-20) THEN
            DOBJ2=.2*ABS(OBJ)
            P2=0.2
            DOBJ2=MAX(DOBJ2,P2)
            RPRM(6)=DOBJ2
         ENDIF
         IF(IPRINT.GE.2) CALL DOT503(RPRM,IPRM,NRWK,NRIWK,IPOINT)
         IF(IPRINT.GT.0) THEN
            WRITE(IWRITE,40)
            JSCAL=0
            ICALC=5
            CALL DOT502 (ICALC,XL,NDV,IWRITE,JSCAL,WK(NSCALX))
            ICALC=1
            CALL DOT502 (ICALC,X,NDV,IWRITE,JSCAL,WK(NSCALX))
            ICALC=6
            CALL DOT502 (ICALC,XU,NDV,IWRITE,JSCAL,WK(NSCALX))
            OBJT=OBJ
            IF(MINMAX.GT.0) OBJT=-OBJT
            WRITE(IWRITE,710)OBJT
            ICALC=4
            IF(NCON.GT.0) CALL DOT502(ICALC,G,NCON,IWRITE,JSCAL,
     *      DUMMY)
         ENDIF
         IF(NCON.GT.0) THEN
            GMX=0.
            DO 712 I=1,NCON
            GG=ABS(G(I))
            GMX=MAX(GG,GMX)
712      CONTINUE
         IF(GMX.GT.10.0.AND.IPRINT.GT.3) WRITE(IWRITE,713)GMX
         ENDIF
      ENDIF
      GO TO (80,160,270,240), IGOTO
80    CONTINUE
      INFO=0
160   CONTINUE
      IF(ISCAL.GT.0) THEN
         JSCAL=2
         CALL DOT004 (JSCAL,NDV,NGT,X,WK(NDF),
     1   WK(NA),WK(NSCALX),IPRNT1,WK(NSX),IWRITE)
         CALL DOT200(INFO,NDV,NCON,IPRINT,OBJ,WK(NSX),XL,XU,G,RPRM,
     2   IPRM,IPOINT,WK,IWK,WK(NDF),WK(NA),IWK(NIC),NGT,MINMAX,
     3   WK(NSCALX),NSCAL,NAC,NVC,METHOD)
         JSCAL=4
         CALL DOT004 (JSCAL,NDV,NGT,X,WK(NDF),
     1   WK(NA),WK(NSCALX),IPRNT1,WK(NSX),IWRITE)
      ELSE
         CALL DOT200(INFO,NDV,NCON,IPRINT,OBJ,X,XL,XU,G,RPRM,IPRM,
     1   IPOINT,WK,IWK,WK(NDF),WK(NA),IWK(NIC),NGT,MINMAX,
     2   WK(NSCALX),NSCAL,NAC,NVC,METHOD)
      ENDIF
      N=IPOINT(35)-1
      IWK(N+6)=NGT
      IPRM(20)=NGT
      IF(INFO.EQ.0) GO TO 310
      IF(INFO.EQ.1) THEN
         IGOTO=2
         IFCALL=IFCALL+1
         GO TO 320
      ENDIF
      IF(NCON.GT.0) CALL DOT401(NCON,G,WK(NGL))
      IGOTO=3
      IF(IGRAD.GT.0) IGCALL=IGCALL+1
      IF(IGRAD.GT.0) GO TO 320
      NGOTOZ=0
240   CONTINUE
      CALL DOT003 (NGOTOZ,OBJ,NDV,X,XL,XU,NGT,IWK(NIC),G,WK(NGL),
     *FDCH,FDCHM,WK(NDF),WK(NA),XSAV,NXFD,OBJS,DX,IGRAD)
      INFO=1
      IF(NGOTOZ.GT.0) THEN
         IGOTO=4
         IFCALL=IFCALL+1
         GO TO 320
      ENDIF
      INFO=2
270   CONTINUE
      IF(NCON.GT.0) CALL DOT401 (NCON,WK(NGL),G)
      IF(MINMAX.GT.0.AND.IGRAD.GT.0) THEN
         DO 275 I=1,NDV
         WK(I)=-WK(I)
275      CONTINUE
      ENDIF
      NSCAL=NSCAL+1
      IF(NSCAL.EQ.1.AND.ISCAL.GT.0) THEN
         JSCAL=1
         CALL DOT004 (JSCAL,NDV,NGT,X,WK(NDF),
     2   WK(NA),WK(NSCALX),IPRNT1,WK(NSX),IWRITE)
         CT=RPRM(1)
         CTMIN=RPRM(2)
         CALL DOT202(NDV,WK(NA),NGT,IWK(NIC),G,CT,CTMIN,NAC,NVC)
      ENDIF
      IF(NSCAL.GT.ISCAL) NSCAL=0
      IF(ISCAL.GT.0) THEN
         JSCAL=3
         CALL DOT004 (JSCAL,NDV,NGT,X,WK(NDF),WK(NA),WK(NSCALX),
     1   IPRNT1,WK(NSX),IWRITE)
      ENDIF
      GO TO 160
310   CONTINUE
      IF(IPRINT.GT.0) THEN
         CALL DOT504 (NDV,NCON,X,XL,XU,G,OBJ,MINMAX,IWRITE)
         WRITE(IWRITE,410)IFCALL
         IF(IGRAD.GT.0) WRITE(IWRITE,420)IGCALL
      ENDIF
320   CONTINUE
      N=IPOINT(34)
      DO 330 I=1,40
         IWK(N)=IPOINT(I)
         N=N+1
330   CONTINUE
      N=IPOINT(27)-1
      WK(N+1)=OBJS
      WK(N+3)=XSAV
      WK(N+4)=DX
      N=IPOINT(35)-1
      IWK(N+1)=IFCALL
      IWK(N+2)=IGCALL
      IWK(N+3)=IGOTO
      IWK(N+4)=NAC
      IWK(N+5)=NGOTOZ
      IWK(N+6)=NGT
      IWK(N+7)=NSCAL
      IWK(N+8)=NVC
      IWK(N+9)=NXFD
      IF(MINMAX.GT.0) OBJ=-OBJ
      RETURN
32    FORMAT(//,2X,'XL(I) IS GREATER THAN XU(I) FOR I =',I5,//,2X,
     *'XL(I) =',1PG11.4,'  XU(I) =',1PG11.4,'  I =',I5)
33    FORMAT(/,2X,'* * DISASTER ERROR - OPTIMIZATION TERMINATED * *')
36    FORMAT (//,2X,'* * VARIABLE',I5,' IS LESS THAN ITS LOWER',
     *' BOUND',/,2X,'X(I) =',1PG11.4,'  XL(I) =',1PG11.4,/,2X,
     *'X(I) IS SET EQUAL TO XL(I) FOR I =',I5)
37    FORMAT (//,2X,'* * VARIABLE',I5,
     *' IS GREATER THAN ITS UPPER BOUND',/,
     *2X,'X(I) =',1PG11.4,'  XU(I) =',1PG11.4,/,2X,
     *'X(I) IS SET EQUAL TO XU(I) FOR I =',I5)
40    FORMAT(//,2X,'-- INITIAL VARIABLES AND BOUNDS')
710   FORMAT(//,2X,'-- INITIAL FUNCTION VALUES',//,2X,
     *'OBJ =',1PG13.5)
713   FORMAT(//,2X,'***** WARNING - ONE OR MORE CONSTRAINT VALUES',
     *' EXCEEDS 10.0 IN MAGNITUDE.',/,4X,'MAXIMUM MAGNITUDE =',
     *1PG12.5,/,4X,'IT IS SUGGESTED TO DIVIDE ALL G VALUES WITH',
     *' AN ABSOLUTE VALUE',/,4X,'GREATER THAN 1.0 BY A CONSTANT',
     *' OF THAT ORDER OF MAGNITUDE.',/,4X,'E.G. IF ABS(G(1))',
     *' = 70.3, DIVIDE G(1) BY 10.0 OR 100.0',/,4X,'THIS SHOULD',
     *' IMPROVE EFFICIENCY AND RELIABILITY OF THE OPTIMIZATION.')
340   FORMAT(/,2X,'DIMENSIONED SIZE OF WK OR IWK IS TOO SMALL',//,2X,
     *'ARRAY  DIMENSIONED  REQUIRED',/,2X,
     *'  WK',2I10,/,2X,' IWK',2I10)
350   FORMAT(/,14X,'<<DISASTER ERROR>>',/,12X,
     *'OPTIMIZATION TERMINATED')
360   FORMAT(//////
     */,18X,'DDDDD        OOOOO       TTTTTTT'
     */,18X,'D    D      O     O         T'
     */,18X,'D    D  ==  O  *  O  ==     T'
     */,18X,'D    D      O     O         T'
     */,18X,'DDDDD        OOOOO          T')
370   FORMAT(/,21X,
     *     'DESIGN OPTIMIZATION TOOLS',////,23X,
     *        '(C) COPYRIGHT, 1995',//,31X,
     *               'VR&D',//,18X,
     *   'ALL RIGHTS RESERVED, WORLDWIDE',//,27X,
     *            'VERSION 4.20',////,13X,
     *'- YOUR INTEGRITY IS OUR COPY PROTECTION -')
371   FORMAT(/,21X,
     *     'DESIGN OPTIMIZATION TOOLS',///,5X,
     *'LIMITED VERSION FOR EVALUATION, TEACHING & RESEARCH ONLY',//,11X,
     * 'THIS PROGRAM IS NOT LICENSED FOR PRODUCTION USE',////,23X,
     *       '(C) COPYRIGHT, 1995',//,31X,
     *          'VR&D',//,18X,
     *   'ALL RIGHTS RESERVED, WORLDWIDE',//,27X,
     *            'VERSION 4.20',////,13X,
     *'- YOUR INTEGRITY IS OUR COPY PROTECTION -')
372   FORMAT(//,2X,'MAXIMUM ALLOWED NDV = 4',
     *       /,2X,'  SPECIFIED NDV = ',I5,
     *       /,2X,'MAXIMUM ALLOWED NCON = 10',
     *       /,2X,'  SPECIFIED NCON =',I7,
     *       /,2X,'* EITHER NDV OR NCON EXCEEDS THE LIMIT*',
     *       /,2X,'*    ALLOWED FOR THIS LIMITED VERSION *',
     *       /,2X,'OPTIMIZATION TERMINATED')
380   FORMAT(/////,2X,'CONTROL PARAMETERS',//,
     *2X,'OPTIMIZATION METHOD,                METHOD =',I8,/,
     *2X,'NUMBER OF DECISION VARIABLES,          NDV =',I8,/,
     *2X,'NUMBER OF CONSTRAINTS,                NCON =',I8,/,
     *2X,'PRINT CONTROL PARAMETER,            IPRINT =',I8,/,
     *2X,'GRADIENT PARAMETER,                  IGRAD =',I8)
390   FORMAT(2X,'  GRADIENTS ARE SUPPLIED BY THE USER')
400   FORMAT(2X,'  FORWARD DIFFERENCE GRADIENTS ARE CALCULATED BY DOT')
402   FORMAT(2X,'  CENTRAL DIFFERENCE GRADIENTS ARE CALCULATED BY DOT')
405   FORMAT(2X,'THE OBJECTIVE FUNCTION WILL BE MINIMIZED')
406   FORMAT(2X,'THE OBJECTIVE FUNCTION WILL BE MAXIMIZED')
410   FORMAT(/,2X,'FUNCTION CALLS =',I8)
420   FORMAT(/,2X,'GRADIENT CALLS =',I8)
430   FORMAT(/,2X,'* * CAUTION: METHOD =',I2,' IS LESS THAN 0',/,2X,
     1'             METHOD = 1 WILL BE USED')
440   FORMAT(/,2X,'* * CAUTION: METHOD =',I2,' IS GREATER THAN 3',/,2X,
     1'             METHOD = 3 WILL BE USED')
450   FORMAT(/,2X,'* * CAUTION: METHOD =',I2,
     1' IS GREATER THAN 2, AND NCON = 0',
     2/,2X,'             METHOD = 2 WILL BE USED')
      END
      SUBROUTINE DOT001 (NDV,NCON,RPRM,IPRM,METHOD,NRWK,NRIWK,NRB,
     *NGMAX,IPRINT,IWRITE,XL,XU)
C
C                 ***** (C) COPYRIGHT *****
C     ***** VANDERPLAATS RESEARCH & DEVELOPMENT, INC. *****
C         ***** ALL RIGHTS RESERVED, WORLDWIDE *****
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION RPRM(*),IPRM(*),WKLOC(20),IWKLOC(20),XL(*),XU(*)
      WKLOC(1)=-.03
      WKLOC(2)=0.003
      WKLOC(3)=0.
      WKLOC(4)=0.001
      WKLOC(5)=0.1
      WKLOC(6)=0.
      WKLOC(7)=0.01
      WKLOC(8)=0.
      WKLOC(9)=0.001
      WKLOC(10)=0.0001
      WKLOC(11)=0.4
      WKLOC(12)=0.
      WKLOC(13)=0.001
      WKLOC(14)=0.
      WKLOC(15)=0.
      WKLOC(16)=0.
      WKLOC(17)=0.
      WKLOC(18)=0.
      WKLOC(19)=0.
      WKLOC(20)=0.
      IWKLOC(1)=0
      IWKLOC(2)=NDV
      IWKLOC(3)=100
      IWKLOC(4)=2
      IWKLOC(5)=6
      IWKLOC(6)=0
      IWKLOC(7)=0
      IWKLOC(8)=50
      IWKLOC(9)=2
      IWKLOC(10)=0
      IWKLOC(11)=0
      IWKLOC(12)=0
      IWKLOC(13)=0
      IWKLOC(14)=0
      IWKLOC(15)=0
      IWKLOC(16)=0
      IWKLOC(17)=0
      IWKLOC(18)=0
      IWKLOC(19)=0
      IWKLOC(20)=0
      IF(IPRINT.GT.7) IPRINT=7
      JPRINT=IPRM(10)
      IF(METHOD.LT.2.OR.NCON.EQ.0) JPRINT=1
      IF(IPRINT.GT.5.AND.JPRINT.GT.0) IPRM(11)=1
      IF(IPRINT.GT.5.AND.JPRINT.GT.0) IPRM(12)=IPRINT-5
      DO 10 I=1,20
         IF(ABS(RPRM(I)).LT.1.0E-20) RPRM(I)=WKLOC(I)
10    CONTINUE
      IF(RPRM(2).LT.1.0E-6) RPRM(2)=1.0E-6
      NCOLA=0
      IF(IPRM(6).GT.0.AND.NCON.GT.0) NCOLA=IPRM(6)
      CALL DOT510(NDV,NCON,NCOLA,METHOD,IRWK,IRIWK,NRB,NGMAX,XL,XU)
      IF(IRWK.LE.NRWK.AND.IRIWK.LE.NRIWK) GO TO 80
         IF(IPRINT.GE.1) THEN
            WRITE(IWRITE,40)
            WRITE(IWRITE,50)NRWK,IRWK,NRIWK,IRIWK
            WRITE(IWRITE,60)NCOLA
         ENDIF
70    CONTINUE
      NCOLA=NCOLA-1
      IF(NCOLA.GE.1) THEN
         CALL DOT510(NDV,NCON,NCOLA,METHOD,IRWK,IRIWK,NRB,NGMAX,XL,XU)
         IF(IRWK.GT.NRWK.OR.IRIWK.GT.NRIWK) GO TO 70
      ENDIF
      IF(NCOLA.LE.0.AND.IPRINT.GE.1) THEN
         WRITE(IWRITE,90)
         NCOLA=0
         CALL DOT510(NDV,NCON,NCOLA,METHOD,IRWK,IRIWK,NRB,NGMAX,XL,XU)
      ELSE
         IF(IPRINT.GE.1) WRITE(IWRITE,100)NCOLA
      ENDIF
      IF(IPRM(6).GT.NCOLA) IPRM(6)=NCOLA
80    CONTINUE
      IWKLOC(6)=NCOLA
      DO 20 I=1,20
         IF(IPRM(I).EQ.0) IPRM(I)=IWKLOC(I)
20    CONTINUE
      IF(METHOD.EQ.3.AND.IPRM(2).GT.0) IPRM(2)=1000
      RETURN
40    FORMAT(//,2X,
     *'* * * REQUIRED STORAGE EXCEEDS USER INPUT VALUE',
     *' FOR NRWK OR NRIWK')
50    FORMAT(/,2X,'STORAGE     INPUT   DESIRED',/,3X,'NRWK ',I10,I10,
     */,3X,'NRIWK',I10,I10)
60    FORMAT(/,2X,'NCOLA WILL BE ADJUSTED IF POSSIBLE',/,2X,
     *'INPUT OR DEFAULT VALUE OF NCOLA =',I10)
90    FORMAT(/,2X,'* * * UNABLE TO ADJUST STORAGE ENOUGH TO TRY',
     *' OPTIMIZATION')
100   FORMAT(/,2X,'* * * WILL TRY OPTIMIZATION WITH NCOLA =',I10)
      END
      SUBROUTINE DOT002 (IPOINT,NDV,NCON,NCOLA,NGMAX,NRB,METHOD)
C
C                 ***** (C) COPYRIGHT *****
C     ***** VANDERPLAATS RESEARCH & DEVELOPMENT, INC. *****
C         ***** ALL RIGHTS RESERVED, WORLDWIDE *****
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION IPOINT(*)
      IPOINT(1)=1
      IPOINT(2)=1+NDV
      IPOINT(3)=IPOINT(2)+NDV*NCOLA
      IPOINT(4)=IPOINT(3)+MAX(NDV,NCOLA)
      IPOINT(5)=IPOINT(4)+NDV
      IPOINT(6)=IPOINT(5)+NDV
      IPOINT(7)=IPOINT(6)+NDV
      IPOINT(8)=IPOINT(7)+NDV
      IPOINT(9)=IPOINT(8)+NRB*NRB
      IF(METHOD.LE.1.AND.NCON.EQ.0) IPOINT(9)=IPOINT(8)+NDV*(NDV+1)/2
      IPOINT(10)=IPOINT(9)+NCON+NDV
      IF(NCON.EQ.0) IPOINT(10)=IPOINT(9)
      IPOINT(11)=IPOINT(10)+NCON
      IPOINT(12)=IPOINT(11)+NCON
      IPOINT(13)=IPOINT(12)+NCON
      IPOINT(14)=IPOINT(13)+NCON
      IPOINT(15)=IPOINT(14)+NCON
      IPOINT(16)=IPOINT(15)+NRB
      IF(NCON.EQ.0) IPOINT(16)=IPOINT(15)
      IPOINT(17)=IPOINT(16)+NRB
      IF(NCON.EQ.0) IPOINT(17)=IPOINT(16)
      IPOINT(18)=IPOINT(17)+NDV
      IPOINT(19)=IPOINT(18)
      IF(METHOD.GT.1) IPOINT(19)=IPOINT(18)+NCON
      IPOINT(20)=IPOINT(19)+NDV
      IPOINT(21)=IPOINT(20)+NDV
      IPOINT(22)=IPOINT(21)
      IPOINT(23)=IPOINT(22)+NDV
      IPOINT(24)=0
      IPOINT(25)=0
      IPOINT(26)=0
      IF(METHOD.GT.1.AND.NCON.GT.0) THEN
         IPOINT(24)=IPOINT(23)+NDV
         IPOINT(25)=IPOINT(24)+NDV
         IPOINT(26)=IPOINT(25)+NDV
         IPOINT(27)=IPOINT(26)+NDV*NCOLA
      ELSE
         IPOINT(27)=IPOINT(23)
      ENDIF
      IPOINT(28)=IPOINT(27)+40
      IPOINT(29)=IPOINT(28)
      IF(METHOD.EQ.2) IPOINT(29)=IPOINT(28)+NCON
      IF(METHOD.GT.2.AND.NCON.GT.0) IPOINT(29)=IPOINT(28)+NDV+
     *NDV*(NDV+1)/2+2*NCON+MAX(NDV,NCON)
      IPOINT(30)=IPOINT(29)-1
      IPOINT(31)=1
      IPOINT(32)=1+NCON
      IPOINT(33)=IPOINT(32)+NDV
      IPOINT(34)=IPOINT(33)+2*MAX(NDV,NGMAX)
      IF(NCON.EQ.0) IPOINT(34)=IPOINT(33)
      IPOINT(35)=IPOINT(34)+40
      IPOINT(36)=IPOINT(35)+30
      IPOINT(37)=IPOINT(36)
      IPOINT(38)=IPOINT(36)
      IPOINT(39)=0
      IF(METHOD.GT.1) THEN
         IPOINT(37)=IPOINT(36)+NGMAX
         IPOINT(38)=IPOINT(37)
      ENDIF
      IF(METHOD.EQ.2.AND.NCON.GT.0) IPOINT(38)=IPOINT(37)+NDV
      IPOINT(40)=IPOINT(38)
      RETURN
      END
      SUBROUTINE DOT003 (JGOTO,OBJ,NDV,X,XL,XU,NCG,IC,G,GSAV,FDCH,
     1FDCHM,DF,A,XSAV,NXFD,OBJS,DX,IGRAD)
C
C                 ***** (C) COPYRIGHT *****
C     ***** VANDERPLAATS RESEARCH & DEVELOPMENT, INC. *****
C         ***** ALL RIGHTS RESERVED, WORLDWIDE *****
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION X(*),DF(*),IC(*),G(*),GSAV(*),A(NDV,*),XL(*),XU(*)
      ZRO=1.0E-10
      FDCH2=FDCH
      FDCHM2=FDCHM
      IF(IGRAD.LT.0) THEN
         FDCH2=2.*FDCH
         FDCHM2=2.*FDCHM
      ENDIF
      IF(JGOTO.GT.0)THEN
         IF(IGRAD.LT.0.AND.NXFD.GT.NDV) GO TO 50
      ENDIF
      IF (JGOTO.GT.0) GO TO 10
      OBJS=OBJ
      NXFD=1
      XSAV=X(1)
      DX=FDCH2*ABS(XSAV)
      IF (DX.LT.FDCHM2) DX=FDCHM2
      X1=XSAV+DX
      IF (X1.GT.XU(1)) DX=-DX
      X1=XSAV+DX
      IF (X1.LT.XL(1)) DX=-DX
      X(1)=XSAV+DX
      JGOTO=1
      RETURN
10    CONTINUE
      DF(NXFD)=(OBJ-OBJS)/DX
      IF (ABS(DF(NXFD)).LT.ZRO) DF(NXFD)=0.
      IF (NCG.EQ.0) GO TO 30
      DO 20 J=1,NCG
         JX=IC(J)
         A(NXFD,J)=(G(JX)-GSAV(JX))/DX
20    CONTINUE
30    X(NXFD)=XSAV
      NXFD=NXFD+1
      IF (NXFD.GT.NDV) GO TO 40
      XSAV=X(NXFD)
      DX=FDCH2*ABS(XSAV)
      IF (DX.LT.FDCHM2) DX=FDCHM2
      X1=XSAV+DX
      IF (X1.GT.XU(NXFD)) DX=-DX
      X1=XSAV+DX
      IF (X1.LT.XL(NXFD)) DX=-DX
      X(NXFD)=XSAV+DX
      OBJ=OBJS
      JGOTO=1
      RETURN
40    CONTINUE
      NXFD=NDV
      IF(IGRAD.EQ.0) THEN
         OBJ=OBJS
         JGOTO=0
         RETURN
      ENDIF
50    CONTINUE
      NXFDM1=NXFD-NDV
      IF (NXFDM1.GT.0) GO TO 60
      XSAV=X(1)
      DX=FDCH2*ABS(XSAV)
      DX=MAX(DX,FDCHM2)
      X1=XSAV+DX
      IF (X1.GT.XU(1)) DX=-DX
      X1=XSAV+DX
      IF (X1.LT.XL(1)) DX=-DX
      IF (DX.GT.0.) THEN
         X1=XSAV-DX
         IF(X1.LT.XL(1)) DX=-2.*DX
      ELSE
         X1=XSAV+2.*DX
         IF(X1.GE.XL(1)) DX=-2.*DX
      ENDIF
      X(1)=XSAV-DX
      JGOTO=1
      OBJ=OBJS
      NXFD=NXFD+1
      RETURN
60    CONTINUE
      IF(DX.GT.0.) THEN
         DF(NXFDM1)=0.5*(DF(NXFDM1)-(OBJ-OBJS)/DX)
      ELSE
         DF(NXFDM1)=4.*DF(NXFDM1)+3.*(OBJ-OBJS)/DX
      ENDIF
      IF (ABS(DF(NXFDM1)).LT.ZRO) DF(NXFDM1)=0.
      IF (NCG.EQ.0) GO TO 80
      DO 70 J=1,NCG
         JX=IC(J)
      IF(DX.GT.0.) THEN
         A(NXFDM1,J)=0.5*(A(NXFDM1,J)-(G(JX)-GSAV(JX))/DX)
      ELSE
         A(NXFDM1,J)=4.*A(NXFDM1,J)+3.*(G(JX)-GSAV(JX))/DX
      ENDIF
70    CONTINUE
80    X(NXFDM1)=XSAV
      NXFD=NXFD+1
      NXFDM1=NXFD-NDV
      OBJ=OBJS
      IF (NXFD.GT.2*NDV) GO TO 90
      XSAV=X(NXFDM1)
      DX=FDCH2*ABS(XSAV)
      DX=MAX(DX,FDCHM2)
      X1=XSAV+DX
      IF (X1.GT.XU(NXFDM1)) DX=-DX
      X1=XSAV+DX
      IF (X1.LT.XL(NXFDM1)) DX=-DX
      IF (DX.GT.0.) THEN
         X1=XSAV-DX
         IF(X1.LT.XL(NXFDM1)) DX=-2.*DX
      ELSE
         X1=XSAV+2.*DX
         IF(X1.GE.XL(NXFDM1)) DX=-2.*DX
      ENDIF
      X(NXFDM1)=XSAV-DX
      OBJ=OBJS
      JGOTO=1
      RETURN
90    CONTINUE
      JGOTO=0
      RETURN
      END
      SUBROUTINE DOT004 (JSCAL,NDV,NGT,X,DF,A,SCALX,IPRNT1,SX,IWRITE)
C
C                 ***** (C) COPYRIGHT *****
C     ***** VANDERPLAATS RESEARCH & DEVELOPMENT, INC. *****
C         ***** ALL RIGHTS RESERVED, WORLDWIDE *****
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION X(*),DF(*),A(NDV,*),SCALX(*),SX(*),DUMY(1)
      IF (JSCAL.LE.0.OR.JSCAL.GT.4) RETURN
      GO TO (10,260,290,340), JSCAL
10    CONTINUE
      ONE=1.
      DO 20 I=1,NDV
         D=MAX(ONE,ABS(X(I)))
         SCALX(I)=1./D
         IF(SCALX(I).LT.0.01) SCALX(I)=0.01
20    CONTINUE
      IF(IPRNT1.EQ.0) RETURN
      WRITE (IWRITE,410)
      JSCAL=0
      CALL DOT501(SCALX,NDV,IWRITE,JSCAL,DUMY)
      RETURN
260   CONTINUE
      DO 270 I=1,NDV
         SX(I)=SCALX(I)*X(I)
270   CONTINUE
      RETURN
290   CONTINUE
      ZRO=1.0E-10
      DO 300 I=1,NDV
         DF(I)=DF(I)/SCALX(I)
         IF(ABS(DF(I)).LT.ZRO) DF(I)=0.
300   CONTINUE
      IF (NGT.EQ.0) RETURN
      DO 310 I=1,NDV
         SCLXI=SCALX(I)
         DO 310 K=1,NGT
            A(I,K)=A(I,K)/SCLXI
            IF(ABS(A(I,K)).LT.ZRO) A(I,K)=0.
310      CONTINUE
      RETURN
340   CONTINUE
      DO 350 I=1,NDV
         X(I)=SX(I)/SCALX(I)
350   CONTINUE
      RETURN
410   FORMAT (//,2X,'SCALING INFORMATION',//,2X,
     2'DESIGN VARIABLE SCALE FACTORS')
      END
